##############################################################################
#
# Name:   netmiko1
# Author: Yagnesh Patel
# Date:   8/1/19
# Version: 1.0
#
# Description: This script work to collect show commands output however you need to supply each of the command seperately and write them seperately in file. 
#              Further script does not print command name while writing in the file.
#
#    Copyright 2019 Juniper Networks, Inc. All rights reserved.
#    Licensed under the Juniper Networks Script Software License (the "License").
#    You may not use this script file except in compliance with the License,
#    which is located at
#    http://www.juniper.net/support/legal/scriptlicense/
#    Unless required by applicable law or otherwise agreed to in writing by the
#    parties, software distributed under the License is distributed on an "AS IS"
#    BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
#    implied.
##############################################################################


#This script work to collect show commands output however you need to supply each of the command seperately and write them seperately in file. 
#Further script does not print command name while writing in the file.

from netmiko import ConnectHandler  
from datetime import datetime  

#Device details
devices = {
    'device_type': 'juniper',
    'ip':   '10.85.174.205',
    'username': 'xxxxxx',
    'password': 'xxxxxx',
    }    

#List containing all device info
device_list=[devices]

#Start time of the program
start_time = datetime.now()


#Connect to the device using Device details
for device in device_list:
    net_connect = ConnectHandler(**device)
    
    # Enter operational mode commands
    interfaces = net_connect.send_command("show interfaces terse | except down | match ge- ")   #Show interfaces that are up
    print (interfaces)
    
    chassis = net_connect.send_command("show chassis hardware") #Show chassis information
    print (chassis)
    
    #show_commands_execute = net_connect.send_command(show_commands) #Show chassis information
    #print (show_commands)
    
        
    # construct directory path based on device name
    filename = "output.txt"
    
    # store output of command in file
    handle = open (filename,'w+')
    handle.write(chassis)
    handle.write(interfaces)
    handle.close()
    
    #End SSH session
    net_connect.disconnect()

#Calculate Total program time
end_time = datetime.now()
total_time = end_time - start_time 
print (total_time)